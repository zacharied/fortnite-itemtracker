#!/usr/bin/env python3

# {{{1 Preamble

from enum import Enum, auto

import requests
from bs4 import BeautifulSoup

# {{{1 Structures

class Rarity(Enum):
    COMMON = auto()
    UNCOMMON = auto()
    RARE = auto()
    EPIC = auto()
    LEGENDARY = auto()

class Item(object):
    def __init__(self, name, price, rarity_str):
        self.name = name
        self.price = price
        self.rarity = rarity_str_to_rarity(rarity_str)

# {{{1 Helper functions

def rarity_str_to_rarity(text):
    if text == 'rarity-common':
        return Rarity.COMMON
    elif text == 'rarity-uncommon':
        return Rarity.UNCOMMON
    elif text == 'rarity-rare':
        return Rarity.RARE
    elif text == 'rarity-epic':
        return Rarity.EPIC
    elif text == 'rarity-legendary':
        return Rarity.LEGENDARY
    else:
        raise ValueError("Invalid rarity string supplied")

# {{{1 Main

p = requests.get('https://fnbr.co')
soup = BeautifulSoup(p.text, 'html.parser')

heading = soup.find(lambda e: e.name == 'h2' and e.text == 'All Items')
html_all_items = heading.find_next_sibling()

html_titles = html_all_items.find_all('h4', {'class': 'card-title'})
html_prices = html_all_items.find_all('p', {'class': 'itemprice'})
html_rarities = html_all_items.find_all('div', {'class':'splash-card'})

# Used with the Item class.
all_items = []

for t in zip(html_titles, html_prices, map(lambda r: r['class'][2], html_rarities)):
    all_items.append(Item(
        t[0].text.strip(), 
        t[1].text.strip(),
        t[2]
    ))

print("Scraped item data. {} items found.".format(len(all_items)))

# }}}1

# vim: fdm=marker:
